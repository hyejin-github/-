{"version":3,"file":"static/js/627.6f99ea1e.chunk.js","mappings":"gRAGaA,EAAU,yCAAG,WAAOC,GAAP,qFAClBC,EAAcC,eAAeC,QAAQ,gBADnB,SAENC,EAAAA,GAAAA,IAAQ,QAASJ,EAAM,CACvCK,QAAS,CACPC,cAAeL,KAJK,cAElBM,EAFkB,yBAOjBA,EAAIP,KAAKQ,SAPQ,2CAAH,sDAUVC,EAAU,yCAAG,kGAClBR,EAAcC,eAAeC,QAAQ,gBADnB,SAENC,EAAAA,GAAAA,OAAW,QAAS,CACpCC,QAAS,CACPC,cAAeL,KAJK,cAElBM,EAFkB,yBAOjBA,EAAIP,KAAKQ,SAPQ,2CAAH,qDAUVE,EAAW,yCAAG,WAAOC,GAAP,qFACnBV,EAAcC,eAAeC,QAAQ,gBADlB,SAEPC,EAAAA,GAAAA,KAChB,iBACA,CAAEO,SAAAA,GACF,CACEN,QAAS,CACPC,cAAeL,KAPI,cAEnBM,EAFmB,yBAWlBA,EAAIP,KAAKQ,SAXS,2CAAH,sDAcXI,EAAU,yCAAG,WAAOC,GAAP,qFAClBZ,EAAcC,eAAeC,QAAQ,iBADnB,gCAGJC,EAAAA,GAAAA,IAAA,4BAA6BS,GAAgB,CAC7DR,QAAS,CACPC,cAAeL,KALG,cAGhBM,EAHgB,yBAQfA,EAAIP,MARW,uBAUNI,EAAAA,GAAAA,IAAA,4BAA6BS,IAVvB,cAUlBN,EAVkB,yBAWjBA,EAAIP,MAXa,4CAAH,sDAcVc,EAAe,yCAAG,WAC7BD,EACAE,GAF6B,4FAIXX,EAAAA,GAAAA,IAAA,yBACES,EADF,qBAC2BE,IALhB,cAIvBR,EAJuB,yBAOtBA,EAAIP,MAPkB,2CAAH,yD,gMCwD5B,MAlGA,WACE,IAAMgB,GAAWC,EAAAA,EAAAA,QAAyB,MAC1C,GAA4BC,EAAAA,EAAAA,WAAS,GAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,KAGjB,KAFiBC,EAAAA,EAAAA,MAEHC,MAEZ,OADAC,MAAM,mEACC,SAAC,KAAD,CAAUC,GAAG,MAGtB,IAOMC,EAAc,yCAAG,uFAEnBf,EAASgB,SACkB,qEAA3BhB,EAASgB,QAAQC,MAHE,uBAKnBX,GAAW,GALQ,UAMDb,EAAAA,EAAAA,MANC,aAOP,YAPO,SAQjBgB,GAASS,EAAAA,EAAAA,QACTC,EAAAA,EAAAA,MACAZ,EAAS,MAVQ,0BAcjBP,EAASgB,UACXhB,EAASgB,QAAQC,MAAQ,GACzBb,GAAU,IAhBS,2CAAH,qDAoBpB,OACE,gBAAKgB,UAAU,UAAf,UACE,iBAAKC,GAAG,SAAR,WACE,oBAAQD,UAAU,SAAlB,WACE,cAAGA,UAAU,+BAAb,8EAGA,cAAGA,UAAU,kCAAb,8EAGA,cAAGA,UAAU,kCAAb,0GAIF,kBAAMA,UAAU,OAAhB,WACE,cAAGA,UAAU,4BAAb,+EACA,kBACEE,KAAK,OACLF,UAAU,4BACVG,YAAY,uEACZC,QAAS,SAAAC,GAAC,OA3CJ,SAACA,GACfA,EAAEC,iBA0CoBC,CAAQF,IACtBG,IAAK5B,IAENG,GACC,cAAGiB,UAAU,0BAAb,iEAEA,gBAAKA,UAAU,iBAGjB,mBACEE,KAAK,SACLF,UAAU,0BACVS,QAASd,EAHX,SAKGV,GACC,gBACEyB,IAAKC,EAAAA,EACLX,UAAU,kBACVY,IAAI,mCAGN,kBAGJ,mBACA,mBACEV,KAAK,SACLF,UAAU,iCACVS,QA3EK,WACbtB,GAAU,IAuEJ","sources":["apis/setAccount.ts","screens/AccountSetting/Withdrawal.tsx"],"sourcesContent":["import { UserInfoType } from \"@store/ducks/auth/authSlice\";\r\nimport API from \"./index\";\r\n\r\nexport const setAccount = async (data: UserInfoType) => {\r\n  const accessToken = sessionStorage.getItem(\"access-token\") as string;\r\n  const res = await API.put(\"/user\", data, {\r\n    headers: {\r\n      Authorization: accessToken\r\n    }\r\n  });\r\n  return res.data.message;\r\n};\r\n\r\nexport const withdrawal = async () => {\r\n  const accessToken = sessionStorage.getItem(\"access-token\") as string;\r\n  const res = await API.delete(\"/user\", {\r\n    headers: {\r\n      Authorization: accessToken\r\n    }\r\n  });\r\n  return res.data.message;\r\n};\r\n\r\nexport const passwordChk = async (password: string) => {\r\n  const accessToken = sessionStorage.getItem(\"access-token\") as string;\r\n  const res = await API.post(\r\n    \"/user/password\",\r\n    { password },\r\n    {\r\n      headers: {\r\n        Authorization: accessToken\r\n      }\r\n    }\r\n  );\r\n  return res.data.message;\r\n};\r\n\r\nexport const getProfile = async (userNickname: string) => {\r\n  const accessToken = sessionStorage.getItem(\"access-token\") as string;\r\n  if (accessToken) {\r\n    const res = await API.get(`/userFeed/profile/${userNickname}`, {\r\n      headers: {\r\n        Authorization: accessToken\r\n      }\r\n    });\r\n    return res.data;\r\n  }\r\n  const res = await API.get(`/userFeed/profile/${userNickname}`);\r\n  return res.data;\r\n};\r\n\r\nexport const getFeedItemList = async (\r\n  userNickname: string,\r\n  category: number\r\n) => {\r\n  const res = await API.get(\r\n    `/userFeed/post/${userNickname}?category=${category}`\r\n  );\r\n  return res.data;\r\n};\r\n\r\nexport default { setAccount };\r\n","import React, { useState, useRef } from \"react\";\r\nimport { useNavigate, useLocation, Navigate } from \"react-router-dom\";\r\nimport \"./Withdrawal.scss\";\r\nimport { withdrawal } from \"@apis/setAccount\";\r\nimport LoadingSpinner from \"@images/LoadingSpinner.svg\";\r\nimport { useAppDispatch } from \"@store/hooks\";\r\nimport { resetUserInfo } from \"@store/ducks/auth/authSlice\";\r\nimport { deleteRefreshToken } from \"@apis/auth\";\r\n\r\nfunction FindPw() {\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n  const [errMsg, setErrMsg] = useState(false);\r\n  const [spinner, setSpinner] = useState(false);\r\n  const navigate = useNavigate();\r\n  const dispatch = useAppDispatch();\r\n  const location = useLocation();\r\n\r\n  if (!location.state) {\r\n    alert(\"비정상적인 접근입니다.\");\r\n    return <Navigate to=\"/\" />;\r\n  }\r\n\r\n  const goBack = () => {\r\n    navigate(-1);\r\n  };\r\n\r\n  const isPaste = (e: React.ClipboardEvent<HTMLInputElement>) => {\r\n    e.preventDefault();\r\n  };\r\n  const sendWithdrawal = async () => {\r\n    if (\r\n      inputRef.current &&\r\n      inputRef.current.value === \"누 가뭐 래도탈 퇴할거 야\"\r\n    ) {\r\n      setSpinner(true);\r\n      const res = await withdrawal();\r\n      if (res === \"SUCCESS\") {\r\n        dispatch(resetUserInfo());\r\n        deleteRefreshToken();\r\n        navigate(\"/\");\r\n      }\r\n      return;\r\n    }\r\n    if (inputRef.current) {\r\n      inputRef.current.value = \"\";\r\n      setErrMsg(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <div id=\"chk-pw\">\r\n        <header className=\"header\">\r\n          <p className=\"header__title notoBold fs-24\">\r\n            우리 회원님 탈퇴하신다.\r\n          </p>\r\n          <p className=\"header__sub-title notoReg fs-16\">\r\n            회원 탈퇴 페이지입니다.\r\n          </p>\r\n          <p className=\"header__sub-title notoReg fs-16\">\r\n            아래 문구를 정확히 입력해주세요.\r\n          </p>\r\n        </header>\r\n        <main className=\"form\">\r\n          <p className=\"form__title notoReg fs-16\">누 가뭐 래도탈 퇴할거 야</p>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form__input notoReg fs-15\"\r\n            placeholder=\"탈퇴 문구를 입력해주세요\"\r\n            onPaste={e => isPaste(e)}\r\n            ref={inputRef}\r\n          />\r\n          {errMsg ? (\r\n            <p className=\"form__msg notoMid fs-12\">일치하지 않습니다.</p>\r\n          ) : (\r\n            <div className=\"form__dummy\" />\r\n          )}\r\n\r\n          <button\r\n            type=\"button\"\r\n            className=\"form__btn notoMid fs-16\"\r\n            onClick={sendWithdrawal}\r\n          >\r\n            {spinner ? (\r\n              <img\r\n                src={LoadingSpinner}\r\n                className=\"loading-spinner\"\r\n                alt=\"로딩스피너\"\r\n              />\r\n            ) : (\r\n              \"확인\"\r\n            )}\r\n          </button>\r\n          <br />\r\n          <button\r\n            type=\"button\"\r\n            className=\"form__btn cancle notoMid fs-16\"\r\n            onClick={goBack}\r\n          >\r\n            취소\r\n          </button>\r\n        </main>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FindPw;\r\n"],"names":["setAccount","data","accessToken","sessionStorage","getItem","API","headers","Authorization","res","message","withdrawal","passwordChk","password","getProfile","userNickname","getFeedItemList","category","inputRef","useRef","useState","errMsg","setErrMsg","spinner","setSpinner","navigate","useNavigate","dispatch","useAppDispatch","useLocation","state","alert","to","sendWithdrawal","current","value","resetUserInfo","deleteRefreshToken","className","id","type","placeholder","onPaste","e","preventDefault","isPaste","ref","onClick","src","LoadingSpinner","alt"],"sourceRoot":""}