{"version":3,"file":"static/js/94.65ed858c.chunk.js","mappings":"gKAAO,IAAMA,EACX,qEACWC,EACX,oF,qLC6GF,MAxGA,WACE,OAA0CC,EAAAA,EAAAA,WAAkB,GAA5D,eAAOC,EAAP,KAAsBC,EAAtB,KACA,GAAwCF,EAAAA,EAAAA,WAAkB,GAA1D,eAAOG,EAAP,KAAqBC,EAArB,KACA,GAAkCJ,EAAAA,EAAAA,WAAkB,GAApD,eAAOK,EAAP,KAAkBC,EAAlB,KAEMC,GAAcC,EAAAA,EAAAA,QAAyB,MACvCC,GAAiBD,EAAAA,EAAAA,QAAyB,MAE1CE,GAAKC,EAAAA,EAAAA,IAAe,SAAAC,GAAK,OAAIA,EAAMC,KAAKC,SAExCC,GAAWC,EAAAA,EAAAA,MAKXC,EAAkB,WAClBR,EAAeS,SAAWX,EAAYW,SACxCd,EACEK,EAAeS,QAAQC,QAAUZ,EAAYW,QAAQC,QAIrDC,EAAe,yCAAG,4GACjBb,EAAYW,eADK,OACjB,EAAqBC,MADJ,gBAEpB,UAAAZ,EAAYW,eAAZ,SAAqBG,QAFD,oCAGVZ,EAAeS,eAHL,OAGV,EAAwBC,MAHd,gBAIpB,UAAAV,EAAeS,eAAf,SAAwBG,QAJJ,2BAKXpB,IAAiBE,EALN,oBAMfE,EANe,wBAOlBC,GAAa,GAPK,WAQAgB,EAAAA,EAAAA,IAAcZ,EAAIH,EAAYW,QAAQC,OARtC,QASN,YATM,QAUhBJ,EAAS,UAEXT,GAAa,GAZK,4CAAH,qDAmBrB,OACE,gBAAKiB,UAAU,UAAf,UACE,iBAAKb,GAAG,WAAR,WACE,mBAAQa,UAAU,SAAlB,UACE,cAAGA,UAAU,+BAAb,wGAIF,kBAAMA,UAAU,OAAhB,WACE,cAAGA,UAAU,4BAAb,uCACA,kBACEC,KAAK,WACLD,UAAU,qCACVE,SA3Ce,SAACC,GACxBxB,EAAiBJ,EAAAA,EAAAA,KAAiB4B,EAAEC,OAAOR,SA2CnCS,OAAQX,EACRY,IAAKtB,EACLuB,YAAY,yEAEb7B,GACC,gBAAKsB,UAAU,WAEf,cAAGA,UAAU,6BAAb,yKAKF,cAAGA,UAAU,4BAAb,mDACA,kBACEC,KAAK,WACLD,UAAU,yCACVE,SAAUR,EACVY,IAAKpB,EACLqB,YAAY,iGACZC,QApCqB,SAACL,GAChB,UAAVA,EAAEM,KAAiBZ,OAqChBjB,GACC,gBAAKoB,UAAU,WAEf,cAAGA,UAAU,iCAAb,gGAIF,mBACEC,KAAK,SACLD,UAAU,0BACVU,QAASb,EAHX,SAKGf,GACC,gBACE6B,IAAKC,EAAAA,EACLZ,UAAU,kBACVa,IAAI,mCAGN","sources":["constants/reg.ts","screens/Login/ResetPw.tsx"],"sourcesContent":["export const passwordReg =\r\n  /^(?=.*[a-zA-z])(?=.*[0-9])(?=.*[$`~!@$!%*#^?&\\\\(\\\\)\\-_=+]).{8,16}$/;\r\nexport const emailReg =\r\n  /^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}$/i;\r\n","import React, { useState, useRef } from \"react\";\r\nimport \"./ResetPw.scss\";\r\nimport { passwordReg } from \"@constants/reg\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { resetPassword } from \"@apis/auth\";\r\nimport { useAppSelector } from \"@store/hooks\";\r\nimport LoadingSpinner from \"@images/LoadingSpinner.svg\";\r\n\r\nfunction ResetPw() {\r\n  const [validPassword, setValidPassword] = useState<boolean>(true);\r\n  const [samePassword, setSamePassword] = useState<boolean>(true);\r\n  const [isLoading, setIsLoading] = useState<boolean>(false);\r\n\r\n  const passwordRef = useRef<HTMLInputElement>(null);\r\n  const chkPasswordRef = useRef<HTMLInputElement>(null);\r\n\r\n  const id = useAppSelector(state => state.auth.tmpId);\r\n\r\n  const navigate = useNavigate();\r\n  const chkValidPassword = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setValidPassword(passwordReg.test(e.target.value));\r\n  };\r\n\r\n  const chkSamePassword = () => {\r\n    if (chkPasswordRef.current && passwordRef.current)\r\n      setSamePassword(\r\n        chkPasswordRef.current.value === passwordRef.current.value\r\n      );\r\n  };\r\n\r\n  const onResetPassword = async () => {\r\n    if (!passwordRef.current?.value) {\r\n      passwordRef.current?.focus();\r\n    } else if (!chkPasswordRef.current?.value) {\r\n      chkPasswordRef.current?.focus();\r\n    } else if (validPassword && samePassword) {\r\n      if (!isLoading) {\r\n        setIsLoading(true);\r\n        const res = await resetPassword(id, passwordRef.current.value);\r\n        if (res === \"SUCCESS\") {\r\n          navigate(\"/login\");\r\n        }\r\n        setIsLoading(false);\r\n      }\r\n    }\r\n  };\r\n  const handlePasswordChkInput = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === \"Enter\") onResetPassword();\r\n  };\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <div id=\"reset-pw\">\r\n        <header className=\"header\">\r\n          <p className=\"header__title notoBold fs-24\">\r\n            비밀번호 재설정을 진행해주세요.\r\n          </p>\r\n        </header>\r\n        <main className=\"form\">\r\n          <p className=\"form__type notoBold fs-16\">비밀번호</p>\r\n          <input\r\n            type=\"password\"\r\n            className=\"form__input fs-15 notoReg password\"\r\n            onChange={chkValidPassword}\r\n            onBlur={chkSamePassword}\r\n            ref={passwordRef}\r\n            placeholder=\"비밀번호를 입력해주세요.\"\r\n          />\r\n          {validPassword ? (\r\n            <div className=\"dummy\" />\r\n          ) : (\r\n            <p className=\"password-msg fs-12 notoMid\">\r\n              숫자,대소문자,특수문자를 혼합하여 8~16자리로 입력해주세요.\r\n            </p>\r\n          )}\r\n\r\n          <p className=\"form__type notoBold fs-16\">비밀번호확인</p>\r\n          <input\r\n            type=\"password\"\r\n            className=\"form__input fs-15 notoReg password-chk\"\r\n            onChange={chkSamePassword}\r\n            ref={chkPasswordRef}\r\n            placeholder=\"비밀번호를 다시 한번 입력해주세요.\"\r\n            onKeyUp={handlePasswordChkInput}\r\n          />\r\n          {samePassword ? (\r\n            <div className=\"dummy\" />\r\n          ) : (\r\n            <p className=\"password-chk-msg fs-12 notoMid\">\r\n              비밀번호가 일치하지 않습니다.\r\n            </p>\r\n          )}\r\n          <button\r\n            type=\"button\"\r\n            className=\"form__btn notoMid fs-16\"\r\n            onClick={onResetPassword}\r\n          >\r\n            {isLoading ? (\r\n              <img\r\n                src={LoadingSpinner}\r\n                className=\"loading-spinner\"\r\n                alt=\"로딩스피너\"\r\n              />\r\n            ) : (\r\n              \"비밀번호 재설정\"\r\n            )}\r\n          </button>\r\n        </main>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ResetPw;\r\n"],"names":["passwordReg","emailReg","useState","validPassword","setValidPassword","samePassword","setSamePassword","isLoading","setIsLoading","passwordRef","useRef","chkPasswordRef","id","useAppSelector","state","auth","tmpId","navigate","useNavigate","chkSamePassword","current","value","onResetPassword","focus","resetPassword","className","type","onChange","e","target","onBlur","ref","placeholder","onKeyUp","key","onClick","src","LoadingSpinner","alt"],"sourceRoot":""}