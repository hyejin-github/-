{"version":3,"file":"static/js/936.834ef9dc.chunk.js","mappings":"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","sources":["screens/ChkEmail.tsx"],"sourcesContent":["import { useAppSelector } from \"@store/hooks\";\r\nimport React, {\r\n  useState,\r\n  useEffect,\r\n  Dispatch,\r\n  SetStateAction,\r\n  useRef\r\n} from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { chkAuthCode, sendAuthCode } from \"@apis/auth\";\r\nimport \"./ChkEmail.scss\";\r\nimport { v4 } from \"uuid\";\r\nimport LoadingSpinner from \"@images/LoadingSpinner.svg\";\r\n\r\ntype ChkEmailProps = {\r\n  type: \"findPw\" | \"login\";\r\n};\r\n\r\ntype TimerProps = {\r\n  setErrMsg: Dispatch<SetStateAction<string>>;\r\n  initTime: number;\r\n  timerKey: string;\r\n};\r\n\r\nfunction Timer({ setErrMsg, initTime, timerKey }: TimerProps) {\r\n  const [timer, setTimer] = useState<ReturnType<typeof setTimeout> | null>();\r\n  const [time, setTime] = useState<number>(initTime);\r\n\r\n  useEffect(() => {\r\n    if (time !== 0 && !timer) {\r\n      const timerId = setTimeout(() => {\r\n        setTimer(null);\r\n        setTime(prev => prev - 1);\r\n      }, 1000);\r\n      setTimer(timerId);\r\n    }\r\n    if (time === 0) setErrMsg(\"인증코드를 새로 발급 받아주세요.\");\r\n  }, [time]);\r\n\r\n  useEffect(() => {\r\n    setTime(initTime);\r\n  }, [timerKey]);\r\n\r\n  return (\r\n    <p className=\"form__time notoReg fs-12\">\r\n      {Math.floor(time / 60)}:{`${time % 60}`.padStart(2, \"0\")}\r\n    </p>\r\n  );\r\n}\r\n\r\nfunction ChkEmail({ type }: ChkEmailProps) {\r\n  const navigate = useNavigate();\r\n\r\n  const userId = useAppSelector(state => state.auth.tmpId);\r\n  const [timerKey, setTimerKey] = useState(v4());\r\n  const [errMsg, setErrMsg] = useState<string>(\" \");\r\n  const [isLoading, setIsLoading] = useState<boolean>(false);\r\n\r\n  const [debounceTimer, setDebounceTimer] =\r\n    useState<ReturnType<typeof setTimeout>>();\r\n\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n  const chkCode = async () => {\r\n    if (!inputRef.current?.value) {\r\n      setErrMsg(\"인증코드를 입력해주세요\");\r\n      inputRef.current?.focus();\r\n      return;\r\n    }\r\n    if (!isLoading) {\r\n      setIsLoading(true);\r\n      let typeNumber = -1;\r\n      if (type === \"login\") typeNumber = 0;\r\n      if (type === \"findPw\") typeNumber = 1;\r\n      const res = await chkAuthCode(\r\n        userId,\r\n        inputRef.current?.value as string,\r\n        typeNumber\r\n      );\r\n      if (res === \"SUCCESS\") {\r\n        if (type === \"login\") navigate(\"/join/detail\");\r\n        if (type === \"findPw\") navigate(\"/reset/pw\");\r\n      } else {\r\n        setErrMsg(\"인증코드가 올바르지 않습니다.\");\r\n        inputRef.current?.focus();\r\n      }\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const reSendAuthCode = () => {\r\n    if (debounceTimer) {\r\n      clearTimeout(debounceTimer);\r\n    }\r\n    const timeoutId = setTimeout(() => {\r\n      let typeNumber = -1;\r\n      if (type === \"login\") typeNumber = 0;\r\n      if (type === \"findPw\") typeNumber = 1;\r\n      sendAuthCode(userId, typeNumber);\r\n      setErrMsg(\" \");\r\n      setTimerKey(v4());\r\n    }, 500);\r\n    setDebounceTimer(timeoutId);\r\n  };\r\n  const handleKeyUP = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === \"Enter\") {\r\n      chkCode();\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"wrraper\">\r\n      <div id=\"chk-email\">\r\n        <header className=\"header\">\r\n          <p className=\"header__title notoBold fs-24\">\r\n            인증 이메일을 보냈습니다.\r\n          </p>\r\n          <p className=\"header__sub-title notoReg fs-16\">\r\n            {userId}에서 이메일을 확인 후 인증코드를 입력해주세요!\r\n          </p>\r\n        </header>\r\n        <main className=\"form\">\r\n          <p className=\"form__title notoMid fs-16\">인증코드</p>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form__input notoReg fs-15\"\r\n            placeholder=\"인증번호를 입력해주세요\"\r\n            ref={inputRef}\r\n            onKeyUp={handleKeyUP}\r\n          />\r\n          <Timer setErrMsg={setErrMsg} initTime={180} timerKey={timerKey} />\r\n          <p className=\"form__msg notoMid fs-12\">{errMsg}</p>\r\n          <button\r\n            className=\"form__btn notoMid fs-16 flex align-center justify-center\"\r\n            type=\"button\"\r\n            onClick={chkCode}\r\n            disabled={errMsg === \"인증코드를 새로 발급 받아주세요.\"}\r\n          >\r\n            {isLoading ? (\r\n              <img\r\n                src={LoadingSpinner}\r\n                className=\"loading-spinner\"\r\n                alt=\"로딩스피너\"\r\n              />\r\n            ) : (\r\n              \"다음\"\r\n            )}\r\n          </button>\r\n        </main>\r\n        <footer className=\"footer\">\r\n          <div className=\"footer-top flex align-center\">\r\n            <p className=\"footer-top__msg notoMid fs-12 ellipsis\">\r\n              인증 이메일을 받지 못하셨나요?\r\n            </p>\r\n            <button\r\n              className=\"footer-top__btn notoBold fs-12\"\r\n              type=\"button\"\r\n              onClick={reSendAuthCode}\r\n            >\r\n              이메일 재전송\r\n            </button>\r\n          </div>\r\n          <div className=\"footer-bottom flex align-center justify-center\">\r\n            <ul className=\"notice-ul notoMid fs-12 flex column\">\r\n              <li className=\"notice-ul__li\">\r\n                인증 이메일은 발송 시점으로 부터 3분간 유효합니다.\r\n              </li>\r\n              <li className=\"notice-ul__li\">\r\n                인증 이메일 재발송 시 기존 인증코드는 무효처리되며, 새로 받은\r\n                인증코드로 인증해야 합니다.\r\n              </li>\r\n              <li className=\"notice-ul__li\">\r\n                이메일이 도착하지 않았다면 스팸메일함을 확인해주세요.\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </footer>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChkEmail;\r\n"],"names":["Timer","setErrMsg","initTime","timerKey","useState","timer","setTimer","time","setTime","useEffect","timerId","setTimeout","prev","className","Math","floor","padStart","type","navigate","useNavigate","userId","useAppSelector","state","auth","tmpId","v4","setTimerKey","errMsg","isLoading","setIsLoading","debounceTimer","setDebounceTimer","inputRef","useRef","chkCode","current","value","focus","typeNumber","chkAuthCode","id","placeholder","ref","onKeyUp","e","key","onClick","disabled","src","LoadingSpinner","alt","clearTimeout","timeoutId","sendAuthCode"],"sourceRoot":""}