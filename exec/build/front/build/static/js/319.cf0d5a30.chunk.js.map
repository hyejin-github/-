{"version":3,"file":"static/js/319.cf0d5a30.chunk.js","mappings":"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","sources":["components/common/ImgUploader/ImgResizer.tsx","components/Letters/Chat.tsx","assets/images/ImgIcon.svg","screens/ChatRoom.tsx","utils/isImage.ts"],"sourcesContent":["import React, { useRef } from \"react\";\r\nimport \"./ImgResizer.scss\";\r\n\r\ninterface ImgResizerProps {\r\n  imgfile: File;\r\n  newImgfile: any;\r\n  imgW: number;\r\n  imgH: number;\r\n}\r\nfunction ImgResizer({ imgfile, newImgfile, imgW, imgH }: ImgResizerProps) {\r\n  const canvasRef = useRef<any>(null);\r\n\r\n  const newImg = new Image();\r\n  const imgUrl = URL.createObjectURL(imgfile);\r\n  newImg.src = imgUrl;\r\n  newImg.onload = () => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas?.getContext(\"2d\");\r\n    if (ctx && canvas) {\r\n      canvas.width = imgW;\r\n      canvas.height = imgH;\r\n      ctx.fillStyle = \"white\";\r\n      ctx.fillRect(0, 0, imgW, imgH);\r\n      ctx.drawImage(newImg, 0, 0, imgW, imgH);\r\n      const dataUrl = canvas.toDataURL(\"image/jpeg\");\r\n      newImgfile(dataUrl);\r\n      URL.revokeObjectURL(imgUrl);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div id=\"resizer\">\r\n      <canvas ref={canvasRef}> </canvas>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default React.memo(ImgResizer);\r\n","import React from \"react\";\r\nimport \"./Chat.scss\";\r\n\r\nexport type ChatProps = {\r\n  type: string;\r\n  content: string;\r\n  image: string | null;\r\n};\r\nfunction Chat({ type, content, image }: ChatProps) {\r\n  return (\r\n    <div id=\"chat\" className={type === \"recv\" ? \"left\" : \"right\"}>\r\n      {image ? (\r\n        <img\r\n          src={`data:image/jpeg;base64,${image}`}\r\n          alt=\"이미지\"\r\n          className=\"chat__img\"\r\n          title=\"이미지\"\r\n        />\r\n      ) : (\r\n        <p className=\"chat-content fs-16 notoReg\">{content}</p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chat;\r\n","var _path;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgImgIcon(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 32,\n    height: 32,\n    viewBox: \"0 0 32 32\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M32 28.4444V3.55556C32 1.6 30.4 0 28.4444 0H3.55556C1.6 0 0 1.6 0 3.55556V28.4444C0 30.4 1.6 32 3.55556 32H28.4444C30.4 32 32 30.4 32 28.4444ZM9.77778 18.6667L14.2222 24.0178L20.4444 16L28.4444 26.6667H3.55556L9.77778 18.6667Z\",\n    fill: \"#D9D9D9\"\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgImgIcon);\nexport default __webpack_public_path__ + \"static/media/ImgIcon.ef67182f308a1c6b4ee997a224e5b028.svg\";\nexport { ForwardRef as ReactComponent };","import Chat, { ChatProps } from \"@components/Letters/Chat\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { useNavigate, useSearchParams } from \"react-router-dom\";\r\nimport { v4 } from \"uuid\";\r\nimport \"./ChatRoom.scss\";\r\nimport UserDummyIcon from \"@images/UserDummy.svg\";\r\nimport ImgResizer from \"@components/common/ImgUploader/ImgResizer\";\r\nimport ImgIcon from \"@images/ImgIcon.svg\";\r\nimport { getDmDetailList, sendDm } from \"@apis/dm\";\r\nimport loadingSpinner from \"@images/LoadingSpinner.svg\";\r\nimport isImage from \"@utils/isImage\";\r\n\r\nfunction ChatRoom() {\r\n  const [searchParams] = useSearchParams();\r\n  const navigate = useNavigate();\r\n  const withId = searchParams.get(\"with\") as string;\r\n  const [dmList, setDmList] = useState<Array<ChatProps>>([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [firstLoading, setFirstLoading] = useState(false);\r\n  const [isSending, setIsSending] = useState(false);\r\n  const [page, setPage] = useState(0);\r\n  const [lastIdx, setLastIdx] = useState(0);\r\n  const [isEnd, setIsEnd] = useState(false);\r\n  const [userImg, setUserImg] = useState(\"\");\r\n  const [sendFile, setSendFile] = useState<File | null>(null);\r\n  const observerTarget = useRef<HTMLDivElement>(null);\r\n  const imgInput = useRef<HTMLInputElement>(null);\r\n\r\n  const getDmList = async () => {\r\n    setIsLoading(true);\r\n    const res = await getDmDetailList(withId as string, lastIdx);\r\n    if (res.message === \"SUCCESS\") {\r\n      if (res.data.fromProfileImg) {\r\n        setUserImg(res.data.fromProfileImg);\r\n      }\r\n      if (!res.data.hasNext) {\r\n        setIsEnd(true);\r\n      }\r\n      if (!firstLoading) {\r\n        setFirstLoading(true);\r\n        setDmList([...res.data.list]);\r\n      } else {\r\n        setDmList([...dmList, ...res.data.list]);\r\n      }\r\n      if (res.data.list.length !== 0) {\r\n        setLastIdx(res.data.list[res.data.list.length - 1].idx);\r\n      }\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const onIntersect = (entries: IntersectionObserverEntry[]) => {\r\n    entries.forEach((entry: IntersectionObserverEntry) => {\r\n      if (entry.isIntersecting && !isLoading) {\r\n        setPage(prev => prev + 1);\r\n      }\r\n    });\r\n  };\r\n\r\n  const submitDm = async (content: string, image: string | null) => {\r\n    if (!isSending) {\r\n      setIsSending(true);\r\n      setDmList([{ type: \"send\", content, image }, ...dmList]);\r\n      await sendDm(withId, content, image);\r\n      setIsSending(false);\r\n    }\r\n  };\r\n\r\n  const handleKeyUp = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === \"Enter\") {\r\n      if (e.target.value !== \"\" && firstLoading) {\r\n        submitDm(e.target.value, null);\r\n        e.target.value = \"\";\r\n      }\r\n    }\r\n  };\r\n\r\n  // 이미지 인풋 열기\r\n  const clickInput = () => {\r\n    imgInput.current?.click();\r\n  };\r\n\r\n  // 이미지 파일 읽고 유효성검사 후 리사이징\r\n  const fileread = () => {\r\n    if (imgInput.current?.files) {\r\n      const file = imgInput.current.files[0];\r\n\r\n      if (file && isImage(file)) {\r\n        setSendFile(file);\r\n      }\r\n    }\r\n  };\r\n\r\n  // 한 파일을 받아서 sendDm\r\n  const receiveFile = async (data: string) => {\r\n    await submitDm(\"\", data.replace(\"data:image/jpeg;base64,\", \"\"));\r\n    setSendFile(null);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!withId) {\r\n      navigate(\"/404\");\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getDmList();\r\n  }, [page]);\r\n\r\n  useEffect(() => {\r\n    const observer = new IntersectionObserver(onIntersect, { threshold: 0.1 });\r\n    if (observerTarget.current) {\r\n      observer.observe(observerTarget.current);\r\n    }\r\n    return () => {\r\n      if (observerTarget.current) {\r\n        observer.unobserve(observerTarget.current);\r\n      }\r\n    };\r\n  }, [dmList]);\r\n\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <div id=\"chat-room\">\r\n        <header className=\"header flex align-center\">\r\n          <img\r\n            className=\"chat-room__user-img\"\r\n            src={\r\n              userImg !== \"\"\r\n                ? `data:image/jpeg;base64,${userImg}`\r\n                : UserDummyIcon\r\n            }\r\n            alt=\"유저더미\"\r\n          />\r\n          <p className=\"chat-room__user-nick-name notoBold fs-24\">{withId}</p>\r\n        </header>\r\n        <div className=\"chat-list\">\r\n          {dmList.length !== 0 ? (\r\n            <>\r\n              {dmList.map((dm: ChatProps) => (\r\n                <Chat\r\n                  type={dm.type}\r\n                  content={dm.content}\r\n                  key={v4()}\r\n                  image={dm.image}\r\n                />\r\n              ))}\r\n              {!isEnd &&\r\n                (isLoading ? (\r\n                  <div\r\n                    className=\"spinner-wrraper\r\n                flex justify-center\"\r\n                  >\r\n                    <img\r\n                      src={loadingSpinner}\r\n                      title=\"로딩스피너\"\r\n                      alt=\"로딩스피너\"\r\n                      className=\"loading-spinner\"\r\n                    />\r\n                  </div>\r\n                ) : (\r\n                  <div ref={observerTarget} className=\"observerTarget\" />\r\n                ))}\r\n            </>\r\n          ) : (\r\n            <div className=\"no-chat flex align-center justify-center fs-24\">\r\n              {firstLoading && \"주고받은 대화가 없습니다!\"}\r\n            </div>\r\n          )}\r\n        </div>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"채팅을 입력해주세요.\"\r\n          className=\"chat-input notoReg fs-15\"\r\n          onKeyUp={handleKeyUp}\r\n        />\r\n        <footer className=\"chat-footer\">\r\n          <button type=\"button\" className=\"chat-btn\" onClick={clickInput}>\r\n            <img src={ImgIcon} alt=\"이미지업로드\" className=\"chat__img-icon\" />\r\n          </button>\r\n        </footer>\r\n        <input\r\n          type=\"file\"\r\n          accept=\"image/*\"\r\n          ref={imgInput}\r\n          onChange={fileread}\r\n        />\r\n      </div>\r\n      {sendFile && (\r\n        <ImgResizer\r\n          imgfile={sendFile}\r\n          newImgfile={receiveFile}\r\n          imgW={200}\r\n          imgH={200}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatRoom;\r\n","const isImage = (file: File) => {\r\n  const fileExt = file.name\r\n    .substring(file.name.lastIndexOf(\".\") + 1, file.name.length)\r\n    .toLowerCase();\r\n  if (\r\n    fileExt !== \"jpg\" &&\r\n    fileExt !== \"png\" &&\r\n    fileExt !== \"gif\" &&\r\n    fileExt !== \"jpeg\"\r\n  ) {\r\n    alert(\"지원하지 않는 확장자에요!\");\r\n    return false;\r\n  }\r\n  return true;\r\n};\r\n\r\nexport default isImage;\r\n"],"names":["ImgResizer","imgfile","newImgfile","imgW","imgH","canvasRef","useRef","newImg","Image","imgUrl","URL","createObjectURL","src","onload","canvas","current","ctx","getContext","width","height","fillStyle","fillRect","drawImage","dataUrl","toDataURL","revokeObjectURL","id","ref","React","type","content","image","className","alt","title","useSearchParams","searchParams","navigate","useNavigate","withId","get","useState","dmList","setDmList","isLoading","setIsLoading","firstLoading","setFirstLoading","isSending","setIsSending","page","setPage","lastIdx","setLastIdx","isEnd","setIsEnd","userImg","setUserImg","sendFile","setSendFile","observerTarget","imgInput","getDmList","getDmDetailList","res","message","data","fromProfileImg","hasNext","list","length","idx","onIntersect","entries","forEach","entry","isIntersecting","prev","submitDm","sendDm","receiveFile","replace","useEffect","observer","IntersectionObserver","threshold","observe","unobserve","UserDummyIcon","map","dm","v4","loadingSpinner","placeholder","onKeyUp","e","key","target","value","onClick","click","ImgIcon","accept","onChange","files","file","isImage","fileExt","name","substring","lastIndexOf","toLowerCase","alert"],"sourceRoot":""}