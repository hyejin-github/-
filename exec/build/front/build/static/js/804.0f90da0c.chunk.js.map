{"version":3,"file":"static/js/804.0f90da0c.chunk.js","mappings":"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","sources":["apis/setAccount.ts","components/common/ImgUploader/ImgResizer.tsx","screens/AccountSetting/AccountSettingPage.tsx"],"sourcesContent":["import { UserInfoType } from \"@store/ducks/auth/authSlice\";\r\nimport API from \"./index\";\r\n\r\nexport const setAccount = async (data: UserInfoType) => {\r\n  const accessToken = sessionStorage.getItem(\"access-token\") as string;\r\n  const res = await API.put(\"/user\", data, {\r\n    headers: {\r\n      Authorization: accessToken\r\n    }\r\n  });\r\n  return res.data.message;\r\n};\r\n\r\nexport const withdrawal = async () => {\r\n  const accessToken = sessionStorage.getItem(\"access-token\") as string;\r\n  const res = await API.delete(\"/user\", {\r\n    headers: {\r\n      Authorization: accessToken\r\n    }\r\n  });\r\n  return res.data.message;\r\n};\r\n\r\nexport const passwordChk = async (password: string) => {\r\n  const accessToken = sessionStorage.getItem(\"access-token\") as string;\r\n  const res = await API.post(\r\n    \"/user/password\",\r\n    { password },\r\n    {\r\n      headers: {\r\n        Authorization: accessToken\r\n      }\r\n    }\r\n  );\r\n  return res.data.message;\r\n};\r\n\r\nexport const getProfile = async (userNickname: string) => {\r\n  const accessToken = sessionStorage.getItem(\"access-token\") as string;\r\n  if (accessToken) {\r\n    const res = await API.get(`/userFeed/profile/${userNickname}`, {\r\n      headers: {\r\n        Authorization: accessToken\r\n      }\r\n    });\r\n    return res.data;\r\n  }\r\n  const res = await API.get(`/userFeed/profile/${userNickname}`);\r\n  return res.data;\r\n};\r\n\r\nexport const getFeedItemList = async (\r\n  userNickname: string,\r\n  category: number\r\n) => {\r\n  const res = await API.get(\r\n    `/userFeed/post/${userNickname}?category=${category}`\r\n  );\r\n  return res.data;\r\n};\r\n\r\nexport default { setAccount };\r\n","import React, { useRef } from \"react\";\r\nimport \"./ImgResizer.scss\";\r\n\r\ninterface ImgResizerProps {\r\n  imgfile: File;\r\n  newImgfile: any;\r\n  imgW: number;\r\n  imgH: number;\r\n}\r\nfunction ImgResizer({ imgfile, newImgfile, imgW, imgH }: ImgResizerProps) {\r\n  const canvasRef = useRef<any>(null);\r\n\r\n  const newImg = new Image();\r\n  const imgUrl = URL.createObjectURL(imgfile);\r\n  newImg.src = imgUrl;\r\n  newImg.onload = () => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas?.getContext(\"2d\");\r\n    if (ctx && canvas) {\r\n      canvas.width = imgW;\r\n      canvas.height = imgH;\r\n      ctx.fillStyle = \"white\";\r\n      ctx.fillRect(0, 0, imgW, imgH);\r\n      ctx.drawImage(newImg, 0, 0, imgW, imgH);\r\n      const dataUrl = canvas.toDataURL(\"image/jpeg\");\r\n      newImgfile(dataUrl);\r\n      URL.revokeObjectURL(imgUrl);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div id=\"resizer\">\r\n      <canvas ref={canvasRef}> </canvas>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default React.memo(ImgResizer);\r\n","import React, { useState, useRef } from \"react\";\r\nimport \"./AccountSettingPage.scss\";\r\nimport { Link, useNavigate, useLocation, Navigate } from \"react-router-dom\";\r\nimport UserDummyIcon from \"@images/UserDummy.svg\";\r\nimport { v4 } from \"uuid\";\r\nimport ImgResizer from \"@components/common/ImgUploader/ImgResizer\";\r\nimport { useAppSelector, useAppDispatch } from \"@store/hooks\";\r\nimport { chkNickNameExist } from \"@apis/auth\";\r\nimport { setAccount } from \"@apis/setAccount\";\r\nimport { getUserInfo } from \"@store/ducks/auth/authThunk\";\r\nimport { UserInfoType } from \"@store/ducks/auth/authSlice\";\r\nimport LoadingSpinner from \"@images/LoadingSpinner.svg\";\r\n\r\nfunction AccountSettingPage() {\r\n  interface setType extends Omit<UserInfoType, \"backgroundImg\" | \"area\"> {\r\n    area?: string;\r\n    backgroundImg?: string;\r\n  }\r\n  const tmpUserInfo = useAppSelector(state => state.auth.userInfo);\r\n  const imgInput = useRef<HTMLInputElement>(null);\r\n  const nickNameInput = useRef<HTMLInputElement>(null);\r\n  const navigate = useNavigate();\r\n  const dispatch = useAppDispatch();\r\n\r\n  if (!tmpUserInfo) {\r\n    navigate(\"/\");\r\n    return <div />;\r\n  }\r\n  const userInfo = { ...tmpUserInfo } as setType;\r\n  const [errMsg, setErrMsg] = useState(false);\r\n  const [errText, setErrText] = useState(\"\");\r\n  const [isChk, setIsChk] = useState(false);\r\n  const [tmpNickName, setTmpNickName] = useState(userInfo.nickname);\r\n  const [tmpText, setTmpText] = useState(\r\n    userInfo.profileMsg ? userInfo.profileMsg : null\r\n  );\r\n  const [sendFile, setSendFile] = useState<File | null>(null);\r\n  const [userImg, setUserImg] = useState(\r\n    userInfo.profileImg\r\n      ? `data:image/jpeg;base64,${userInfo.profileImg}`\r\n      : UserDummyIcon\r\n  );\r\n  const [spinner, setSpinner] = useState(false);\r\n\r\n  // 프로필 이미지 설정 부분\r\n  const clickInput = () => {\r\n    if (imgInput.current) {\r\n      imgInput.current.click();\r\n    }\r\n  };\r\n\r\n  const fileread = () => {\r\n    if (imgInput.current?.files) {\r\n      const file = imgInput.current.files[0];\r\n      if (file) {\r\n        setSendFile(file);\r\n      }\r\n    }\r\n  };\r\n\r\n  const receiveFile = (data: string) => {\r\n    if (userInfo) {\r\n      setUserImg(data);\r\n      const incData = data.replace(\"data:image/jpeg;base64,\", \"\");\r\n      userInfo.profileImg = incData;\r\n    }\r\n  };\r\n\r\n  // 상태 메세지 설정 부분\r\n  const handleText = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n    setTmpText(e.target.value);\r\n  };\r\n\r\n  const chkLength = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\r\n    const state = e.target.value;\r\n    if (state.length > 98) {\r\n      const txt = state.substring(0, 98);\r\n      e.target.value = txt;\r\n      e.target.focus();\r\n      return;\r\n    }\r\n    const rows = state.split(\"\\n\");\r\n    if (rows.length > 5) {\r\n      const txt = rows.splice(0, 5);\r\n\r\n      e.target.value = txt.join(\"\\n\");\r\n\r\n      e.target.focus();\r\n    }\r\n  };\r\n\r\n  // 닉네임 중복 체크\r\n  const nickNameChk = async () => {\r\n    if (nickNameInput.current?.value === \"\") {\r\n      nickNameInput.current.focus();\r\n      return;\r\n    }\r\n\r\n    const res = await chkNickNameExist(nickNameInput.current?.value as string);\r\n    setIsChk(true);\r\n\r\n    if ((nickNameInput.current?.value.length as number) > 10) {\r\n      setErrMsg(false);\r\n      setErrText(\"닉네임은 10자 이하입니다.\");\r\n    } else if (res === \"SUCCESS\" && nickNameInput.current) {\r\n      setErrMsg(true);\r\n      setTmpNickName(nickNameInput.current.value);\r\n    } else {\r\n      setErrMsg(false);\r\n      setErrText(\"중복된 닉네임입니다.\");\r\n    }\r\n  };\r\n\r\n  // 버튼 라우팅\r\n  const goBack = () => {\r\n    navigate(-1);\r\n  };\r\n  const goWithdrawal = () => {\r\n    navigate(\"/account/withdrawal\", { state: true });\r\n  };\r\n\r\n  // 알람 토글 부분\r\n  const noti = [\"좋아요\", \"팔로잉\", \"댓글\", \"대댓글\"];\r\n  const followState = [\"팔로우\", \"팔로잉\"];\r\n  const [notiList, setNotiList] = useState([\r\n    userInfo.likeNotice,\r\n    userInfo.followNotice,\r\n    userInfo.commentNotice,\r\n    userInfo.replyNotice,\r\n    userInfo.followerOpen,\r\n    userInfo.followOpen\r\n  ]);\r\n\r\n  // 전송 부분\r\n  const changeSet = async () => {\r\n    [\r\n      userInfo.likeNotice,\r\n      userInfo.followNotice,\r\n      userInfo.commentNotice,\r\n      userInfo.replyNotice,\r\n      userInfo.followerOpen,\r\n      userInfo.followOpen\r\n    ] = [\r\n      notiList[0],\r\n      notiList[1],\r\n      notiList[2],\r\n      notiList[3],\r\n      notiList[4],\r\n      notiList[5]\r\n    ];\r\n    if (tmpNickName) {\r\n      userInfo.nickname = tmpNickName;\r\n    }\r\n    userInfo.profileMsg = tmpText;\r\n    delete userInfo.area;\r\n    delete userInfo.backgroundImg;\r\n    const res = await setAccount(userInfo as UserInfoType);\r\n    if (res === \"SUCCESS\") {\r\n      await dispatch(getUserInfo());\r\n      navigate(`/userfeed/${tmpNickName}`);\r\n    }\r\n    setSpinner(true);\r\n  };\r\n\r\n  return (\r\n    <div id=\"accountSetting-page\">\r\n      <input type=\"file\" ref={imgInput} accept=\"image/*\" onChange={fileread} />\r\n      <div className=\"setprofile notoMid fs-36\">\r\n        <div className=\"setprofile__title\">프로필 설정</div>\r\n        <div className=\"img-container flex column\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"user-container flex\"\r\n            onClick={clickInput}\r\n          >\r\n            <img\r\n              className=\"img-container__user\"\r\n              src={userImg}\r\n              alt=\"userImg\"\r\n              title=\"userImg\"\r\n            />\r\n            <p className=\"img-container__user-add fs-48\">+</p>\r\n          </button>\r\n          {sendFile ? (\r\n            <ImgResizer\r\n              imgfile={sendFile}\r\n              newImgfile={receiveFile}\r\n              imgW={300}\r\n              imgH={300}\r\n            />\r\n          ) : null}\r\n        </div>\r\n        <div className=\"text-wrapper flex column\">\r\n          <p>{userInfo.nickname}</p>\r\n          <textarea\r\n            className=\"state notoReg\"\r\n            defaultValue={tmpText as string}\r\n            onChange={e => handleText(e)}\r\n            onKeyDown={e => chkLength(e)}\r\n          />\r\n          <p className=\"text-info fs-12\">\r\n            최대 99자 줄바꿈은 5번까지 가능합니다.\r\n          </p>\r\n        </div>\r\n      </div>\r\n      <div className=\"setaccount\">\r\n        <div className=\"title notoMid fs-36 p-none\">계정 설정</div>\r\n        <div className=\"main\">\r\n          <div className=\"main-account__title flex\">\r\n            <p className=\"fs-24 notoMid\">회원정보 수정</p>\r\n            <button onClick={goWithdrawal} type=\"button\" className=\"fs-12\">\r\n              회원탈퇴\r\n            </button>\r\n          </div>\r\n          <div className=\"main-account flex column\">\r\n            <div className=\"main-account__nickname flex\">\r\n              <p className=\"fs-16 notoReg\">닉네임</p>\r\n              <div>\r\n                <input\r\n                  type=\"text\"\r\n                  ref={nickNameInput}\r\n                  defaultValue={userInfo.nickname}\r\n                />\r\n                {isChk ? (\r\n                  <p className=\"notoReg\">\r\n                    {errMsg ? (\r\n                      <span className=\"success\">사용 가능한 닉네임입니다.</span>\r\n                    ) : (\r\n                      <span className=\"err\">{errText}</span>\r\n                    )}\r\n                  </p>\r\n                ) : null}\r\n              </div>\r\n              <button\r\n                className=\"notoMid fs-12\"\r\n                type=\"button\"\r\n                onClick={nickNameChk}\r\n              >\r\n                중복확인\r\n              </button>\r\n            </div>\r\n            <div className=\"main-account__addinfo flex\">\r\n              <p className=\"fs-16 notoReg\">지역·태그</p>\r\n              <Link to=\"/join/more\" className=\"notoMid fs-12\">\r\n                변경하기\r\n              </Link>\r\n              <div> </div>\r\n            </div>\r\n            {userInfo.social === \"normal\" && (\r\n              <div className=\"main-account__addinfo flex\">\r\n                <p className=\"fs-16 notoReg\">비밀번호</p>\r\n                <Link to=\"/reset/pw\" className=\"notoMid fs-12\">\r\n                  변경하기\r\n                </Link>\r\n                <div> </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n          <div className=\"main-noti__title fs-24 notoMid\">알림 설정</div>\r\n          <div className=\"main-noti__toggle flex\">\r\n            {noti.map((title, idx) => {\r\n              return (\r\n                <div className=\"main-noti__toggle-item flex\" key={v4()}>\r\n                  <p className=\"notoReg fs-14\">{title}</p>\r\n                  <button\r\n                    onClick={() => {\r\n                      setNotiList(cur => {\r\n                        const newArr = [...cur];\r\n                        newArr[idx] = !newArr[idx];\r\n                        return newArr;\r\n                      });\r\n                    }}\r\n                    type=\"button\"\r\n                    className={`main-noti__toggle-btn flex ${\r\n                      notiList[idx] ? \"justify-end\" : null\r\n                    }`}\r\n                  >\r\n                    <div\r\n                      className={\r\n                        notiList[idx] ? \"active-toggle-bar\" : \"toggle-bar\"\r\n                      }\r\n                    >\r\n                      {null}\r\n                    </div>\r\n                    <div\r\n                      className={\r\n                        notiList[idx] ? \"active-toggle-circle\" : \"toggle-circle\"\r\n                      }\r\n                    >\r\n                      {null}\r\n                    </div>\r\n                  </button>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n          <div className=\"main-noti__title fs-24 notoMid\">공개 설정</div>\r\n          <div className=\"main-noti__toggle flex\">\r\n            {followState.map((title, idx) => {\r\n              const idxx = idx + 4;\r\n              return (\r\n                <div className=\"main-noti__toggle-item flex\" key={v4()}>\r\n                  <p className=\"notoReg fs-14\">{title}</p>\r\n                  <button\r\n                    onClick={() => {\r\n                      setNotiList(cur => {\r\n                        const newArr = [...cur];\r\n                        newArr[idxx] = !newArr[idxx];\r\n                        return newArr;\r\n                      });\r\n                    }}\r\n                    type=\"button\"\r\n                    className={`main-noti__toggle-btn flex ${\r\n                      notiList[idxx] ? \"justify-end\" : null\r\n                    }`}\r\n                  >\r\n                    <div\r\n                      className={\r\n                        notiList[idxx] ? \"active-toggle-bar\" : \"toggle-bar\"\r\n                      }\r\n                    >\r\n                      {null}\r\n                    </div>\r\n                    <div\r\n                      className={\r\n                        notiList[idxx]\r\n                          ? \"active-toggle-circle\"\r\n                          : \"toggle-circle\"\r\n                      }\r\n                    >\r\n                      {null}\r\n                    </div>\r\n                  </button>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {spinner ? (\r\n        <div className=\"spinner-container\">\r\n          <img\r\n            src={LoadingSpinner}\r\n            className=\"loading-spinner\"\r\n            alt=\"로딩스피너\"\r\n          />\r\n        </div>\r\n      ) : (\r\n        <div className=\"setaccount-submit flex fs-24 notoMid\">\r\n          <button\r\n            className=\"setaccount-submit__submit\"\r\n            type=\"button\"\r\n            onClick={changeSet}\r\n          >\r\n            설정\r\n          </button>\r\n          <button\r\n            onClick={goBack}\r\n            className=\"setaccount-submit__cancle\"\r\n            type=\"button\"\r\n          >\r\n            취소\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default React.memo(AccountSettingPage);\r\n"],"names":["setAccount","data","accessToken","sessionStorage","getItem","API","headers","Authorization","res","message","withdrawal","passwordChk","password","getProfile","userNickname","getFeedItemList","category","ImgResizer","imgfile","newImgfile","imgW","imgH","canvasRef","useRef","newImg","Image","imgUrl","URL","createObjectURL","src","onload","canvas","current","ctx","getContext","width","height","fillStyle","fillRect","drawImage","dataUrl","toDataURL","revokeObjectURL","id","ref","React","AccountSettingPage","tmpUserInfo","useAppSelector","state","auth","userInfo","imgInput","nickNameInput","navigate","useNavigate","dispatch","useAppDispatch","useState","errMsg","setErrMsg","errText","setErrText","isChk","setIsChk","nickname","tmpNickName","setTmpNickName","profileMsg","tmpText","setTmpText","sendFile","setSendFile","profileImg","UserDummyIcon","userImg","setUserImg","spinner","setSpinner","nickNameChk","value","focus","chkNickNameExist","length","likeNotice","followNotice","commentNotice","replyNotice","followerOpen","followOpen","notiList","setNotiList","changeSet","area","backgroundImg","getUserInfo","type","accept","onChange","files","file","className","onClick","click","alt","title","incData","replace","defaultValue","e","target","handleText","onKeyDown","txt","substring","rows","split","splice","join","chkLength","to","social","map","idx","cur","newArr","v4","idxx","LoadingSpinner"],"sourceRoot":""}