{"version":3,"file":"static/js/448.d5cbebd4.chunk.js","mappings":"yQAsFA,MA9EA,WACE,OAA4BA,EAAAA,EAAAA,UAAiB,IAA7C,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAkCF,EAAAA,EAAAA,WAAkB,GAApD,eAAOG,EAAP,KAAkBC,EAAlB,KACMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,KACXC,GAAaC,EAAAA,EAAAA,QAAyB,MAEtCC,EAAc,yCAAG,0GAChBF,EAAWG,eADK,OAChB,EAAoBC,MADJ,gBAEnB,UAAAJ,EAAWG,eAAX,SAAoBE,QACpBZ,EAAU,kEAHS,0BAITC,EAJS,wBAKnBC,GAAa,GACPW,EAAQN,EAAWG,QAAQC,MANd,WAODG,EAAAA,EAAAA,IAAaD,EAAO,GAPnB,QAQP,YARO,QASjBR,GAASU,EAAAA,EAAAA,IAAS,CAAEF,MAAAA,KACpBV,EAAS,aAETH,EAAU,yEAEZE,GAAa,GAdM,4CAAH,qDAqBpB,OACE,iBAAKc,UAAU,UAAf,WACE,iBAAKC,GAAG,UAAR,WACE,oBAAQD,UAAU,SAAlB,WACE,cAAGA,UAAU,+BAAb,mFAGA,cAAGA,UAAU,kCAAb,8HAGA,cAAGA,UAAU,kCAAb,4HAIF,kBAAMA,UAAU,OAAhB,WACE,cAAGA,UAAU,4BAAb,iCACA,kBACEE,KAAK,OACLF,UAAU,4BACVG,YAAY,gEACZC,IAAKb,EACLc,QAzBe,SAACC,GACV,UAAVA,EAAEC,KAAiBd,OA0BL,KAAXV,GACC,cAAGiB,UAAU,0BAAb,SAAwCjB,KAExC,gBAAKiB,UAAU,iBAGjB,mBACEE,KAAK,SACLF,UAAU,0BACVQ,QAASf,EAHX,SAKGR,GACC,gBACEwB,IAAKC,EAAAA,EACLC,IAAI,iCACJX,UAAU,oBAGZ,4DAID","sources":["screens/Login/FindPw.tsx"],"sourcesContent":["import { sendAuthCode } from \"@apis/auth\";\r\nimport { setTmpId } from \"@store/ducks/auth/authSlice\";\r\nimport { useAppDispatch } from \"@store/hooks\";\r\nimport React, { useRef, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport \"./FindPw.scss\";\r\nimport LoadingSpinner from \"@images/LoadingSpinner.svg\";\r\n\r\nfunction FindPw() {\r\n  const [errMsg, setErrMsg] = useState<string>(\"\");\r\n  const [isLoading, setIsLoading] = useState<boolean>(false);\r\n  const navigate = useNavigate();\r\n  const dispatch = useAppDispatch();\r\n  const idInputRef = useRef<HTMLInputElement>(null);\r\n\r\n  const submitAuthCode = async () => {\r\n    if (!idInputRef.current?.value) {\r\n      idInputRef.current?.focus();\r\n      setErrMsg(\"이메일을 입력해주세요.\");\r\n    } else if (!isLoading) {\r\n      setIsLoading(true);\r\n      const tmpId = idInputRef.current.value;\r\n      const res = await sendAuthCode(tmpId, 1);\r\n      if (res === \"SUCCESS\") {\r\n        dispatch(setTmpId({ tmpId }));\r\n        navigate(\"chkEmail\");\r\n      } else {\r\n        setErrMsg(\"가입된 이메일이 아닙니다.\");\r\n      }\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n  const handleEmailInput = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === \"Enter\") submitAuthCode();\r\n  };\r\n\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <div id=\"find-pw\">\r\n        <header className=\"header\">\r\n          <p className=\"header__title notoBold fs-24\">\r\n            비밀번호를 까먹으셨나요?\r\n          </p>\r\n          <p className=\"header__sub-title notoReg fs-16\">\r\n            가입에 사용하였떤 이메일을 입력해주세요\r\n          </p>\r\n          <p className=\"header__sub-title notoReg fs-16\">\r\n            해당 이메일로 인증코드를 보내드릴게요.\r\n          </p>\r\n        </header>\r\n        <main className=\"form\">\r\n          <p className=\"form__title notoReg fs-16\">이메일</p>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form__input notoReg fs-15\"\r\n            placeholder=\"이메일을 입력해주세요\"\r\n            ref={idInputRef}\r\n            onKeyUp={handleEmailInput}\r\n          />\r\n          {errMsg !== \"\" ? (\r\n            <p className=\"form__msg notoMid fs-12\">{errMsg}</p>\r\n          ) : (\r\n            <div className=\"form__dummy\" />\r\n          )}\r\n\r\n          <button\r\n            type=\"button\"\r\n            className=\"form__btn notoMid fs-16\"\r\n            onClick={submitAuthCode}\r\n          >\r\n            {isLoading ? (\r\n              <img\r\n                src={LoadingSpinner}\r\n                alt=\"로딩스피너\"\r\n                className=\"loading-spinner\"\r\n              />\r\n            ) : (\r\n              \"인증번호 전송하기\"\r\n            )}\r\n          </button>\r\n        </main>\r\n      </div>{\" \"}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FindPw;\r\n"],"names":["useState","errMsg","setErrMsg","isLoading","setIsLoading","navigate","useNavigate","dispatch","useAppDispatch","idInputRef","useRef","submitAuthCode","current","value","focus","tmpId","sendAuthCode","setTmpId","className","id","type","placeholder","ref","onKeyUp","e","key","onClick","src","LoadingSpinner","alt"],"sourceRoot":""}